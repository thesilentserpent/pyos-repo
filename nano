#!/usr/bin/env python3
"""
nano.py - nano-like text editor for SIMOS
Usage: nano <file>
Keys:
  Ctrl+O  Save
  Ctrl+X  Exit
  Ctrl+G  Help
  Arrows  Move cursor
"""
import curses
import sys
import os
from pathlib import Path

SIMOS_ROOT = Path(os.environ.get('SIMOS_ROOT', '.')).resolve()
SIMOS_CWD = os.environ.get('SIMOS_CWD', '/')

def real_path(virtual_path: str, cwd_virtual: str) -> Path:
    if virtual_path.startswith('/'):
        v = Path(virtual_path)
    else:
        v = Path(cwd_virtual) / virtual_path
    v_parts = []
    for p in v.parts:
        if p == '.':
            continue
        if p == '..':
            if v_parts:
                v_parts.pop()
            continue
        v_parts.append(p)
    virtual_abs = Path('/')
    for p in v_parts:
        virtual_abs /= p
    rel = Path(*[p for p in virtual_abs.parts if p != '/'])
    return (SIMOS_ROOT / rel).resolve()

if len(sys.argv) < 2:
    print('Usage: nano <file>')
    sys.exit(1)

target = real_path(sys.argv[1], SIMOS_CWD)
target.parent.mkdir(parents=True, exist_ok=True)

# Load file if exists
lines = []
if target.exists():
    lines = target.read_text().splitlines()
else:
    lines = [""]

modified = False
filename = sys.argv[1]

def draw_editor(stdscr):
    global modified
    curses.curs_set(1)
    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)

    max_y, max_x = stdscr.getmaxyx()
    status_bar = "Ctrl+O Save  Ctrl+X Exit  Ctrl+G Help"
    cursor_y, cursor_x = 0, 0
    top_line = 0

    while True:
        stdscr.clear()

        # Draw file content
        for idx, line in enumerate(lines[top_line: top_line + max_y - 2]):
            stdscr.addstr(idx, 0, line[:max_x - 1])

        # Status bar
        stdscr.attron(curses.color_pair(1))
        status = f" {filename} {'(modified)' if modified else ''} "
        stdscr.addstr(max_y - 2, 0, status.ljust(max_x - 1))
        stdscr.addstr(max_y - 1, 0, status_bar.ljust(max_x - 1))
        stdscr.attroff(curses.color_pair(1))

        stdscr.move(cursor_y - top_line, cursor_x)
        stdscr.refresh()

        key = stdscr.getch()

        if key in (curses.KEY_UP, ord('k')):
            if cursor_y > 0:
                cursor_y -= 1
                cursor_x = min(cursor_x, len(lines[cursor_y]))
            elif top_line > 0:
                top_line -= 1
        elif key in (curses.KEY_DOWN, ord('j')):
            if cursor_y < len(lines) - 1:
                cursor_y += 1
                cursor_x = min(cursor_x, len(lines[cursor_y]))
            else:
                lines.append("")
                cursor_y += 1
                cursor_x = 0
                modified = True
        elif key in (curses.KEY_LEFT, ord('h')):
            if cursor_x > 0:
                cursor_x -= 1
        elif key in (curses.KEY_RIGHT, ord('l')):
            if cursor_x < len(lines[cursor_y]):
                cursor_x += 1
        elif key in (10, 13):  # Enter
            left = lines[cursor_y][:cursor_x]
            right = lines[cursor_y][cursor_x:]
            lines[cursor_y] = left
            lines.insert(cursor_y + 1, right)
            cursor_y += 1
            cursor_x = 0
            modified = True
        elif key == curses.KEY_BACKSPACE or key == 127:
            if cursor_x > 0:
                lines[cursor_y] = lines[cursor_y][:cursor_x - 1] + lines[cursor_y][cursor_x:]
                cursor_x -= 1
                modified = True
            elif cursor_y > 0:
                prev_len = len(lines[cursor_y - 1])
                lines[cursor_y - 1] += lines[cursor_y]
                del lines[cursor_y]
                cursor_y -= 1
                cursor_x = prev_len
                modified = True
        elif key == 24:  # Ctrl+X
            if modified:
                save_file()
            break
        elif key == 15:  # Ctrl+O
            save_file()
        elif key == 7:  # Ctrl+G
            show_help(stdscr, max_y, max_x)
        elif 32 <= key <= 126:
            lines[cursor_y] = lines[cursor_y][:cursor_x] + chr(key) + lines[cursor_y][cursor_x:]
            cursor_x += 1
            modified = True

def save_file():
    target.write_text("\n".join(lines) + "\n")

def show_help(stdscr, max_y, max_x):
    help_text = [
        "Nano-like Editor Help",
        "Ctrl+O : Save file",
        "Ctrl+X : Exit",
        "Ctrl+G : Help",
        "Arrows : Move cursor",
        "",
        "Press any key to return..."
    ]
    stdscr.clear()
    for i, line in enumerate(help_text):
        stdscr.addstr(i + (max_y // 2 - len(help_text) // 2), max_x // 2 - len(line) // 2, line)
    stdscr.refresh()
    stdscr.getch()

curses.wrapper(draw_editor)
